name: Core

on:
  push:
    branches: [ LSPosed ]
    paths-ignore:
    - 'app/**'
    - '**.md'
    - '.github/workflows/manager.yml'
  pull_request:
    paths-ignore:
    - 'app/**'
    - '**.md'
    - '.github/workflows/manager.yml'

jobs:
  build:
    runs-on: ubuntu-20.04
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        fetch-depth: 0
    - name: Write key
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/LSPosed'
      run: |
        echo androidStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> gradle.properties
        echo androidKeyAlias='${{ secrets.ALIAS }}' >> gradle.properties
        echo androidKeyPassword='${{ secrets.KEY_PASSWORD }}' >> gradle.properties
        echo androidStoreFile='key.jks' >> gradle.properties
        echo ${{ secrets.KEY_STORE }} | base64 --decode > key.jks
    - name: set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Cache Gradle
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-core-${{ github.sha }}
        restore-keys: |
          gradle-
    - name: Cache Cmake
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ccache-cache-${{ github.sha }}
        restore-keys: ccache-cache-
    - name: Install ccache
      run: sudo apt-get install -y ccache
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Build with Gradle
      run:  |
        echo 'org.gradle.caching=true' >> gradle.properties
        echo 'org.gradle.parallel=true' >> gradle.properties
        echo 'org.gradle.vfs.watch=true' >> gradle.properties
        echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
        bash ./gradlew zipRelease
    - name: Prepare artifact
      if: success()
      id: prepareArtifact
      run: |
        releaseName=`ls core/release/LSPosed-v*-release.zip | awk -F '(/|release.zip)' '{print $3}'` && echo "::set-output name=releaseName::$releaseName"
        unzip core/release/LSPosed-v*-release.zip -d LSPosed-release
    - name: Upload release
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.prepareArtifact.outputs.releaseName }}${{ steps.date.outputs.date }}-release
        path: './LSPosed-release/*'
#    - name: Upload debug
#      if: ${{ github.event_name == 'pull_request' && success() }}
#      uses: actions/upload-artifact@v2
#      with:
#        name: ${{ steps.prepareArtifact.outputs.debugName }}
#        path: './LSPosed-debug/*'
#    - name: Upload mappings
#      uses: actions/upload-artifact@v2
#      with:
#        name: mappings
#        path: "core/build/outputs/mapping/release"
#    - name: Post to channel
#      if: ${{ github.event_name != 'pull_request' && success() && github.ref == 'refs/heads/master' }}
#      env:
#        CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
#        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
#        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
#      run: |
#        OUTPUT="core/release/"
#        export release=$(find $OUTPUT -name "LSPosed-v*-release.zip")
#        export debug=$(find $OUTPUT -name "LSPosed-v*-debug.zip")
#        ESCAPED=`python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ["COMMIT_MESSAGE"])))'`
#        curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://release%22%7D,%7B%22type%22:%22document%22,%20%22media%22:%22attach://debug%22,%22caption%22:${ESCAPED}%7D%5D"  -F release="@$release" -F debug="@$debug"
